<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangeDirectoryCommand_HelpSummary" xml:space="preserve">
    <value>Append the given directory to the currently selected path, or move up a path when using `cd ..`</value>
  </data>
  <data name="ChangeDirectoryCommand_Warning_UnknownEndpoint" xml:space="preserve">
    <value>Warning: The '{0}' endpoint is not present in the Swagger metadata</value>
    <comment>{0} is the path to the referenced endpoint</comment>
  </data>
  <data name="ClearCommand_HelpSummary" xml:space="preserve">
    <value>Removes all text from the shell</value>
  </data>
  <data name="EchoCommand_HelpSummary" xml:space="preserve">
    <value>Turns request echoing on or off, show the request that was made when using request commands</value>
  </data>
  <data name="Error_NoBasePath" xml:space="preserve">
    <value>'set base {url}' must be called before issuing requests to a relative path</value>
    <comment>Error shown in console when issuing an HTTP command without first setting the base url</comment>
  </data>
  <data name="Error_OutputRedirected" xml:space="preserve">
    <value>Cannot start the REPL when output is being redirected</value>
  </data>
  <data name="ExitCommand_HelpSummary" xml:space="preserve">
    <value>Exit the shell</value>
  </data>
  <data name="Help_Arguments" xml:space="preserve">
    <value>Arguments:</value>
  </data>
  <data name="Help_BaseAddress" xml:space="preserve">
    <value>  {0} - The initial base address for the REPL.</value>
    <comment>{0} is the &lt;BASE_ADDRESS&gt; syntax specifier</comment>
  </data>
  <data name="Help_Help" xml:space="preserve">
    <value>  {0} - Show help information.</value>
    <comment>{0} is the --help syntax specifier</comment>
  </data>
  <data name="Help_Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="Help_REPLCommands" xml:space="preserve">
    <value>Once the REPL starts, these commands are valid:</value>
  </data>
  <data name="Help_Usage" xml:space="preserve">
    <value>Usage: </value>
  </data>
  <data name="ListCommand_HelpSummary" xml:space="preserve">
    <value>Show all endpoints for the current path</value>
  </data>
  <data name="PrefCommand_Error_NoConfiguredValue" xml:space="preserve">
    <value>{0} does not have a configured value</value>
    <comment>{0} is the name of the requested preference</comment>
  </data>
  <data name="PrefCommand_Error_NoGetOrSet" xml:space="preserve">
    <value>Whether to get or set a preference must be specified</value>
  </data>
  <data name="PrefCommand_Error_NoPreferenceName" xml:space="preserve">
    <value>The preference to set must be specified</value>
  </data>
  <data name="PrefCommand_Error_Saving" xml:space="preserve">
    <value>Error saving preferences</value>
  </data>
  <data name="PrefCommand_Get_ConfiguredValue" xml:space="preserve">
    <value>Configured value: {0}</value>
    <comment>{0} is the value of the specified preference</comment>
  </data>
  <data name="PrefCommand_HelpDetails_CurrentPreferences" xml:space="preserve">
    <value>Current Preferences:</value>
  </data>
  <data name="PrefCommand_HelpDetails_DefaultPreferences" xml:space="preserve">
    <value>Current Default Preferences:</value>
  </data>
  <data name="PrefCommand_HelpDetails_GetSyntax" xml:space="preserve">
    <value>{0} - Gets the value of the specified preference or lists all preferences if no preference is specified</value>
    <comment>{0} is the get command syntax</comment>
  </data>
  <data name="PrefCommand_HelpDetails_SetSyntax" xml:space="preserve">
    <value>{0} - Sets (or clears if value is not specified) the value of the specified preference</value>
    <comment>{0} is the set command syntax</comment>
  </data>
  <data name="PrefCommand_HelpDetails_Syntax" xml:space="preserve">
    <value>{0} - Get or sets a preference to a particular value</value>
    <comment>{0} is the overall command syntax</comment>
  </data>
  <data name="PrefCommand_HelpSummary" xml:space="preserve">
    <value>Allows viewing or changing preferences, e.g. 'pref set editor.command.default 'C:\\Program Files\\Microsoft VS Code\\Code.exe'`</value>
  </data>
  <data name="RunCommand_HelpSummary" xml:space="preserve">
    <value>Runs the script at the given path. A script is a set of commands that can be typed with one command per line</value>
  </data>
  <data name="SetHeaderCommand_HelpSummary" xml:space="preserve">
    <value>Sets or clears a header for all requests. e.g. `set header content-type application/json`</value>
  </data>
  <data name="SetSwaggerCommand_HelpSummary" xml:space="preserve">
    <value>Set the URI, relative to your base if set, of the Swagger document for this API. e.g. `set swagger /swagger/v1/swagger.json`</value>
  </data>
  <data name="UICommand_HelpSummary" xml:space="preserve">
    <value>Displays the Swagger UI page, if available, in the default browser</value>
  </data>
  <data name="SetSwaggerCommand_Description" xml:space="preserve">
    <value>Sets the swagger document to use for information about the current server</value>
  </data>
  <data name="SetSwaggerCommand_SpecifySwaggerDocument" xml:space="preserve">
    <value>Must specify a swagger document</value>
  </data>
  <data name="UICommand_Description" xml:space="preserve">
    <value>Launches the Swagger UI page (if available) in the default browser</value>
  </data>
  <data name="UICommand_NotConnectedToServerError" xml:space="preserve">
    <value>Must be connected to a server to launch Swagger UI</value>
  </data>
  <data name="UICommand_UnableToLaunchUriError" xml:space="preserve">
    <value>Unable to launch {0}</value>
    <comment>{0} indicates a uri</comment>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage: </value>
  </data>
  <data name="SetHeaderCommand_HelpDetails" xml:space="preserve">
    <value>Sets or clears a header. When [value] is empty the header is cleared.</value>
  </data>
  <data name="RunCommand_HelpDetails" xml:space="preserve">
    <value>run {path to script}

Runs the specified script.
A script is a text file containing one CLI command per line. Each line will be run as if it was typed into the CLI.

When +history option is specified, commands specified in the text file will be added to command history.</value>
  </data>
  <data name="RunCommand_CouldNotFindScriptFile" xml:space="preserve">
    <value>Could not find script file {0}</value>
    <comment>{0} indicates path to provided script file</comment>
  </data>
  <data name="HttpState_Error_NoAbsoluteUriNoBaseAddress" xml:space="preserve">
    <value>If {0} is not an absolute URI, {1} must be specified.</value>
    <comment>{0} is the name of the commandSpecifiedPath parameter, {1} is the name of the baseAddress uri parameter</comment>
  </data>
  <data name="ListCommand_Error_NoBaseAddress" xml:space="preserve">
    <value>No base address has been set, so there is nothing to list. Use the "set base" command to set a base address.</value>
  </data>
  <data name="ListCommand_Error_NoDirectoryStructure" xml:space="preserve">
    <value>No directory structure has been set, so there is nothing to list. Use the "set swagger" command to set a directory structure based on a swagger definition.</value>
  </data>
  <data name="SetSwaggerCommand_InvalidSwaggerUri" xml:space="preserve">
    <value>Must specify a valid swagger document</value>
  </data>
  <data name="ConnectCommand_Error_InvalidBase" xml:space="preserve">
    <value>The base address must be a valid absolute url or relative url. If it is a relative url, the root address must be specified</value>
  </data>
  <data name="ConnectCommand_Error_InvalidSwagger" xml:space="preserve">
    <value>The swagger address must be a valid absolute url or relative url. If it is a relative url, the root address must be specified</value>
  </data>
  <data name="ConnectCommand_Error_NoRootNoAbsoluteBase" xml:space="preserve">
    <value>If no root address is specified, the base address must be an absolute url, including scheme</value>
  </data>
  <data name="ConnectCommand_Error_NoRootNoAbsoluteSwagger" xml:space="preserve">
    <value>If no root address is specified, the swagger address must be an absolute url, including scheme</value>
  </data>
  <data name="ConnectCommand_Error_NothingSpecified" xml:space="preserve">
    <value>You must specify either a root address or a base address and a swagger address</value>
  </data>
  <data name="ConnectCommand_Error_RootAddressNotValid" xml:space="preserve">
    <value>If specified, the root address must be a valid absolute url, including scheme</value>
  </data>
  <data name="ConnectCommand_Status_Base" xml:space="preserve">
    <value>Using a base address of {0}</value>
    <comment>{0} indicates a uri</comment>
  </data>
  <data name="ConnectCommand_Status_NoBase" xml:space="preserve">
    <value>Unable to determine a base address</value>
  </data>
  <data name="ConnectCommand_Status_Swagger" xml:space="preserve">
    <value>Using swagger definition at {0}</value>
    <comment>{0} indicates a uri</comment>
  </data>
  <data name="ConnectCommand_Status_NoSwagger" xml:space="preserve">
    <value>Unable to find a swagger definition</value>
  </data>
  <data name="ConnectCommand_Description" xml:space="preserve">
    <value>Configures the directory structure and base address of the api server</value>
  </data>
  <data name="ConnectCommand_HelpDetails_Line1" xml:space="preserve">
    <value>Configures the directory structure and base address of the api server based on the arguments and options specified. At least one of [rootAddress], [--base baseAddress] or [--swagger swaggerAddress] must be specified</value>
  </data>
  <data name="ConnectCommand_HelpDetails_Line2" xml:space="preserve">
    <value>[rootAddress] will be used to automatically determine the base address and swagger address</value>
  </data>
  <data name="ConnectCommand_HelpDetails_Line3" xml:space="preserve">
    <value>[--base baseAddress] and [--swagger swaggerAddress] allow you to explicitly set those addresses and skip auto detection</value>
  </data>
  <data name="HelpCommand_Core_CustomizationCommands" xml:space="preserve">
    <value>REPL Customization Commands:</value>
  </data>
  <data name="HelpCommand_Core_CustomizationCommands_Description" xml:space="preserve">
    <value>Use these commands to customize the REPL behavior</value>
  </data>
  <data name="HelpCommand_Core_Details_Line1" xml:space="preserve">
    <value>Use `help &lt;COMMAND&gt;` for more detail on an individual command. e.g. `help get`</value>
  </data>
  <data name="HelpCommand_Core_Details_Line2" xml:space="preserve">
    <value>For detailed tool info, see https://aka.ms/http-repl-doc</value>
  </data>
  <data name="HelpCommand_Core_HttpCommands" xml:space="preserve">
    <value>HTTP Commands:</value>
  </data>
  <data name="HelpCommand_Core_HttpCommands_Description" xml:space="preserve">
    <value>Use these commands to execute requests against your application</value>
  </data>
  <data name="HelpCommand_Core_NavigationCommands" xml:space="preserve">
    <value>Navigation Commands:</value>
  </data>
  <data name="HelpCommand_Core_NavigationCommands_Description" xml:space="preserve">
    <value>The REPL allows you to navigate your URL space and focus on specific APIs that you are working on</value>
  </data>
  <data name="HelpCommand_Core_SetupCommands" xml:space="preserve">
    <value>Setup Commands:</value>
  </data>
  <data name="HelpCommand_Core_SetupCommands_Description" xml:space="preserve">
    <value>Use these commands to configure the tool for your API server</value>
  </data>
  <data name="HelpCommand_Core_ShellCommands" xml:space="preserve">
    <value>Shell Commands:</value>
  </data>
  <data name="HelpCommand_Core_ShellCommands_Description" xml:space="preserve">
    <value>Use these commands to interact with the REPL shell</value>
  </data>
  <data name="SetBaseCommand_HEADRequestUnSuccessful" xml:space="preserve">
    <value>Warning: HEAD request to the specified address was unsuccessful {0}</value>
    <comment>{0} is the SocketException message</comment>
  </data>
  <data name="SetBaseCommand_HelpSummary" xml:space="preserve">
    <value>Set the base URI. e.g. `set base http://locahost:5000`</value>
  </data>
  <data name="SetBaseCommand_MustSpecifyServerError" xml:space="preserve">
    <value>Must specify a server</value>
  </data>
  <data name="RealFileSystem_Error_InvalidExtension" xml:space="preserve">
    <value>If specified, {0} must begin with a period and have at least one character after the period.</value>
    <comment>{0} is the parameter name</comment>
  </data>
  <data name="UICommand_InvalidParameter" xml:space="preserve">
    <value>The parameter '{0}' could not be converted into a valid uri.</value>
    <comment>{0} is a string parameter to the UI command</comment>
  </data>
  <data name="UICommand_HelpText_Line1" xml:space="preserve">
    <value>The {0} command uses multiple sources to determine the Swagger UI endpoint. In order of precedence:</value>
    <comment>{0} is the name of the ui command (ui)</comment>
  </data>
  <data name="UICommand_HelpText_Line2" xml:space="preserve">
    <value>  1. The {0} parameter, if specified</value>
    <comment>{0} is the syntax for the parameter, e.g. {swaggerUIAddress}</comment>
  </data>
  <data name="UICommand_HelpText_Line3" xml:space="preserve">
    <value>  2. The {0} preference, if set</value>
    <comment>{0} is the name of the preference, e.g. swagger.uiEndpoint</comment>
  </data>
  <data name="UICommand_HelpText_Line4" xml:space="preserve">
    <value>  3. A default URL of {0}</value>
    <comment>{0} is the default address, e.g. [BaseAddress]/swagger</comment>
  </data>
  <data name="BaseHttpCommand_Error_HeaderFormatting" xml:space="preserve">
    <value>Headers must be formatted as {header}={value} or {header}:{value}</value>
  </data>
  <data name="BaseHttpCommand_FormatBodyAsync_Streaming" xml:space="preserve">
    <value>Streaming the response, press any key to stop...</value>
  </data>
  <data name="EchoCommand_Error_AllowedModes" xml:space="preserve">
    <value>Allowed echo modes are 'on' and 'off'</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options:</value>
  </data>
</root>